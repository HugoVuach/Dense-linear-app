# =============================================================================
# Image : worker-chameleon (CUDA + StarPU + OpenBLAS + Chameleon + ArmoniK C++ SDK)
# But   : construire un worker C++ ArmoniK s'appuyant sur Chameleon custom.
# Rem   : Ce Dockerfile est 100% autonome côté toolchain Chameleon.
#         Le SDK C++ ArmoniK (headers + libs) est copié depuis ./sdk/ (voir README).
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 1 — builder
#   Construit OpenBLAS, hwloc(CUDA), StarPU, Chameleon (avec CUDA)
# -----------------------------------------------------------------------------
FROM ubuntu:24.04 AS builder

ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

# Outils de build + dépendances de base
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake git pkg-config \
    libhwloc-dev libnuma-dev libomp-dev \
    libtool libtool-bin autoconf automake m4 \
    gfortran curl wget unzip \
    zlib1g-dev libffi-dev libssl-dev \
    libevent-dev libudev-dev libcap-dev \
    libx11-dev libxext-dev libxrender-dev libxtst-dev \
    python3 python3-pip python3-dev \
    libxml2-dev libxslt1-dev \
    libnuma1 \
    libpciaccess0 libpciaccess-dev \
    ninja-build ocl-icd-opencl-dev \
    ca-certificates gnupg2 lsb-release software-properties-common \
    openmpi-bin libopenmpi-dev \
    libnvidia-ml-dev \
 && rm -rf /var/lib/apt/lists/*

# ---------- OpenBLAS ----------
RUN set -eux; cd /tmp; \
    git clone --depth 1 --branch v0.3.26 https://github.com/xianyi/OpenBLAS.git; \
    cd OpenBLAS; make USE_LAPACK=1 LAPACKE=1 -j"$(nproc)"; \
    make install PREFIX=/usr/local; ldconfig; rm -rf /tmp/OpenBLAS

# ---------- CUDA Toolkit (nvcc + headers) ----------
# NB: on n’installe pas les drivers ici; ils viennent du nœud via NVIDIA Container Toolkit
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && rm -f cuda-keyring_1.1-1_all.deb && \
    apt-get update && apt-get install -y --no-install-recommends cuda-toolkit-12-9 && \
    rm -rf /var/lib/apt/lists/*

# Rendre visibles les libs CUDA
RUN printf "/usr/local/cuda/lib64\n/usr/local/lib\n" > /etc/ld.so.conf.d/cuda.conf && ldconfig

# ---------- ENV de build ----------
ENV CUDA_HOME="/usr/local/cuda" \
    PATH="/usr/local/cuda/bin:/opt/hwloc_cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:/opt/hwloc_cuda/lib:${LD_LIBRARY_PATH:-}" \
    PKG_CONFIG_PATH="/usr/local/cuda/lib64/pkgconfig:/opt/hwloc_cuda/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:${PKG_CONFIG_PATH:-}"

# ---------- hwloc avec CUDA (NVML off) ----------
RUN set -eux; cd /tmp; \
    git clone --branch hwloc-2.10.0 https://github.com/open-mpi/hwloc.git; \
    cd hwloc; ./autogen.sh; \
    export ac_cv_lib_nvidia_ml_nvmlInit=no; \
    ./configure --enable-cuda --with-cuda=/usr/local/cuda --disable-nvml --prefix=/opt/hwloc_cuda; \
    make -j"$(nproc)"; make install; ldconfig; rm -rf /tmp/hwloc

# ---------- StarPU (CUDA/OpenCL/MPI), sans bindings Python ----------
RUN set -eux; cd /tmp; \
  git clone --depth 1 --branch starpu-1.4 https://gitlab.inria.fr/starpu/starpu.git; \
  cd starpu; ./autogen.sh; \
  ./configure --prefix=/usr/local \
      --with-hwloc=/opt/hwloc_cuda \
      --enable-cuda --enable-opencl --enable-mpi \
      --with-cuda=/usr/local/cuda \
      --disable-build-doc \
      --disable-python --without-python --disable-starpupy \
      PYTHON=no \
      --with-blas-lib="-lopenblas" \
      --with-blas-inc="/usr/local/include"; \
  make -j"$(nproc)"; \
  mkdir -p /usr/local/lib/python3.12/site-packages || true; \
  make install; ldconfig; rm -rf /tmp/starpu

# ---------- Chameleon (CUDA + StarPU + OpenBLAS) ----------
RUN set -eux; cd /tmp; \
    git clone --depth 1 --recurse-submodules https://gitlab.inria.fr/solverstack/chameleon.git; \
    cd chameleon; mkdir build && cd build; \
    cmake .. \
      -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON \
      -DCHAMELEON_ENABLE_CUDA=ON -DCHAMELEON_USE_CUDA=ON \
      -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
      -DCHAMELEON_ENABLE_MPI=ON -DCHAMELEON_ENABLE_OPENCL=ON \
      -DCHAMELEON_SCHED_STARPU=ON -DCHAMELEON_SCHED_PARSEC=OFF -DCHAMELEON_SCHED_QUARK=OFF \
      -DCHAMELEON_ENABLE_TESTING=OFF -DCHAMELEON_PREC_D=ON \
      -DBLAS_LIBRARIES="/usr/local/lib/libopenblas.so" \
      -DBLAS_INCLUDE_DIRS="/usr/local/include" \
      -DLAPACKE_INCLUDE_DIR="/usr/local/include" \
      -DLAPACKE_LIBRARY="/usr/local/lib/libopenblas.so" \
      -DCBLAS_LIBRARY="/usr/local/lib/libopenblas.so" \
      -DSTARPU_DIR=/usr/local -DHWLOC_ROOT=/opt/hwloc_cuda; \
    make -j"$(nproc)"; make install; ldconfig; rm -rf /tmp/chameleon


# -----------------------------------------------------------------------------
# Stage 2 — sdk
#   Amène le SDK C++ ArmoniK + gRPC/Protobuf (headers + runtime)
#   -> On copie depuis le repo local : ./sdk/include et ./sdk/lib
# -----------------------------------------------------------------------------
FROM ubuntu:24.04 AS sdk

ENV DEBIAN_FRONTEND=noninteractive

# Installer gRPC/Protobuf depuis apt (suffisant pour la plupart des builds).
# Si tu dois figer d'autres versions, remplace par une build from-source ici.
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgrpc++-dev protobuf-compiler-grpc protobuf-compiler libprotobuf-dev \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Répertoire SDK ArmoniK (fourni par le repo)
# Attendu : ./sdk/include (headers ArmoniK + objects.pb.h) et ./sdk/lib (libs éventuelles)
WORKDIR /opt/armonik
COPY sdk/include/ /opt/armonik/include/
COPY sdk/lib/     /opt/armonik/lib/

ENV ARM_DK_INCLUDE=/opt/armonik/include \
    ARM_DK_LIB=/opt/armonik/lib


# -----------------------------------------------------------------------------
# Stage 3 — worker-build
#   Compile le binaire DagCholeskyWorker contre Chameleon/StarPU/gRPC/Protobuf
# -----------------------------------------------------------------------------
FROM builder AS worker-build

# On récupère gRPC/Protobuf + SDK ArmoniK depuis le stage sdk
COPY --from=sdk /usr/include /usr/include
COPY --from=sdk /usr/lib /usr/lib
COPY --from=sdk /opt/armonik /opt/armonik

# Variables utiles pour la découverte
ENV ARM_DK_INCLUDE=/opt/armonik/include \
    ARM_DK_LIB=/opt/armonik/lib \
    PKG_CONFIG_PATH="/opt/hwloc_cuda/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/cuda/lib64/pkgconfig:${PKG_CONFIG_PATH:-}" \
    LD_LIBRARY_PATH="/opt/hwloc_cuda/lib:/usr/local/lib:/usr/local/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}" \
    PATH="/usr/local/bin:/opt/hwloc_cuda/bin:/usr/local/cuda/bin:${PATH}"

# Sources du worker
WORKDIR /src
# On attend dans le repo : CMakeLists.txt + src/worker.cpp + appsettings.json (+ sdk/)
COPY CMakeLists.txt ./
COPY src/ ./src/
# NB: appsettings.json sera copié au runtime stage

# Build du worker
RUN cmake -S . -B build -DCMAKE_BUILD_TYPE=Release && \
    cmake --build build -j"$(nproc)" && \
    strip build/DagCholeskyWorker || true


# -----------------------------------------------------------------------------
# Stage 4 — runtime
#   Image finale minimaliste (runtime CUDA + libs + binaire worker)
# -----------------------------------------------------------------------------
FROM nvidia/cuda:12.9.0-runtime-ubuntu24.04 AS runtime

ENV DEBIAN_FRONTEND=noninteractive

# Paquets runtime strictement nécessaires
RUN apt-get update && apt-get install -y --no-install-recommends \
    libnuma1 libgomp1 libevent-2.1-7t64 libcap2 libudev1 \
    libx11-6 libxext6 libxrender1 libxtst6 \
    libxml2 ocl-icd-libopencl1 libgfortran5 libquadmath0 \
    libpciaccess0 pkg-config ca-certificates \
    # gRPC/Protobuf runtime
    libgrpc++1 libprotobuf32 && \
    rm -rf /var/lib/apt/lists/*

# Artefacts runtime depuis builder
COPY --from=builder /usr/local/ /usr/local/
COPY --from=builder /opt/hwloc_cuda/ /opt/hwloc_cuda/

# SDK ArmoniK (au cas où libs runtime)
COPY --from=sdk /opt/armonik/lib/ /opt/armonik/lib/
ENV LD_LIBRARY_PATH="/opt/armonik/lib:/opt/hwloc_cuda/lib:/usr/local/lib:/usr/local/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}"

# Binaire et configuration
WORKDIR /app
COPY --from=worker-build /src/build/DagCholeskyWorker /app/DagCholeskyWorker
COPY appsettings.json /app/appsettings.json

# Répertoire pour les sockets Unix et éventuels scratch
RUN mkdir -p /cache /data && \
    useradd -m -u 10001 worker && chown -R worker:worker /app /cache /data
USER worker

# ENV conseillés (peuvent être override par le manifest)
ENV CHAMELEON_DIR="/usr/local" \
    STARPU_PREFIX="/usr/local" \
    CUDA_HOME="/usr/local/cuda" \
    PKG_CONFIG_PATH="/opt/hwloc_cuda/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/cuda/lib64/pkgconfig:${PKG_CONFIG_PATH:-}" \
    LD_LIBRARY_PATH="/opt/armonik/lib:/opt/hwloc_cuda/lib:/usr/local/lib:/usr/local/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}" \
    PATH="/usr/local/bin:/opt/hwloc_cuda/bin:/usr/local/cuda/bin:${PATH}"

# Dossier de travail
WORKDIR /app

# Entrypoint simple : lance le worker
CMD ["/app/DagCholeskyWorker"]
