cmake_minimum_required(VERSION 3.20)
project(DagCholeskyWorker LANGUAGES CXX)

# ------------------------------------------------------------------
# 0. Options C++
# ------------------------------------------------------------------
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ------------------------------------------------------------------
# 1. Préfixe du SDK ArmoniK (installé par le stage "sdk")
# ------------------------------------------------------------------
set(ARMONIKCPP_PREFIX "$ENV{ARMONIKCPP_PREFIX}" CACHE PATH "Prefix of ArmoniK C++ SDK install")
if(NOT ARMONIKCPP_PREFIX)
  set(ARMONIKCPP_PREFIX "/opt/armonik-cpp")
endif()

# ------------------------------------------------------------------
# 2. Protobuf / Threads
# ------------------------------------------------------------------
find_package(Protobuf REQUIRED)
find_package(Threads REQUIRED)

# ------------------------------------------------------------------
# 3. pkg-config pour grpc++ / Chameleon / StarPU / OpenBLAS / hwloc
# ------------------------------------------------------------------
find_program(PKG_CONFIG_EXECUTABLE pkg-config REQUIRED)

macro(require_pkg name module)
  execute_process(COMMAND ${PKG_CONFIG_EXECUTABLE} --exists ${module} RESULT_VARIABLE HAVE_${name})
  if(NOT HAVE_${name} EQUAL 0)
    message(FATAL_ERROR "${module} introuvable via pkg-config")
  endif()
  execute_process(COMMAND ${PKG_CONFIG_EXECUTABLE} --cflags ${module}
                  OUTPUT_VARIABLE ${name}_CFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
  execute_process(COMMAND ${PKG_CONFIG_EXECUTABLE} --libs ${module}
                  OUTPUT_VARIABLE ${name}_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)
  separate_arguments(${name}_CFLAGS_LIST NATIVE_COMMAND "${${name}_CFLAGS}")
  separate_arguments(${name}_LIBS_LIST   NATIVE_COMMAND "${${name}_LIBS}")
endmacro()

require_pkg(GRPCPP   grpc++)
require_pkg(CHAM     chameleon)
require_pkg(STARPU   starpu-1.4)
require_pkg(OPENBLAS openblas)
require_pkg(HWLOC    hwloc)

# ------------------------------------------------------------------
# 4. Headers du SDK ArmoniK + Protobuf
# ------------------------------------------------------------------
include_directories(${ARMONIKCPP_PREFIX}/include)
include_directories(${ARMONIKCPP_PREFIX}/include/armonik/common)  # objects.pb.h, exceptions
include_directories(${ARMONIKCPP_PREFIX}/include/armonik/worker)  # WorkerServer.h + agent_common*.pb.h
include_directories(${Protobuf_INCLUDE_DIRS})

# ------------------------------------------------------------------
# 5. Exécutable
# ------------------------------------------------------------------
add_executable(DagCholeskyWorker
  src/worker_distib.cpp
)

# Cflags cumulés (gRPC/Chameleon/StarPU/BLAS/hwloc) sur la cible
target_compile_options(DagCholeskyWorker PRIVATE
  ${GRPCPP_CFLAGS_LIST}
  ${CHAM_CFLAGS_LIST}
  ${STARPU_CFLAGS_LIST}
  ${OPENBLAS_CFLAGS_LIST}
  ${HWLOC_CFLAGS_LIST}
)

# ------------------------------------------------------------------
# 6. Trouver la bibliothèque ArmoniK (souvent unique: libArmoniK.Api.Worker.a)
# ------------------------------------------------------------------
link_directories(${ARMONIKCPP_PREFIX}/lib)

function(find_armonik_worker OUT_VAR)
  foreach(name
    ArmoniK.Api.Worker
    armonik_worker
    armonikapiworker
    ArmoniKWorker
  )
    find_library(_lib NAMES ${name} PATHS ${ARMONIKCPP_PREFIX}/lib NO_DEFAULT_PATH)
    if(_lib)
      set(${OUT_VAR} "${_lib}" PARENT_SCOPE)
      return()
    endif()
  endforeach()
  set(${OUT_VAR} "NOTFOUND" PARENT_SCOPE)
endfunction()

find_armonik_worker(ARMONIK_WORKER_LIB)
if(ARMONIK_WORKER_LIB STREQUAL "NOTFOUND")
  message(FATAL_ERROR "Impossible de trouver la librairie du SDK C++ ArmoniK dans ${ARMONIKCPP_PREFIX}/lib")
endif()
message(STATUS "ArmoniK worker lib  : ${ARMONIK_WORKER_LIB}")

# Déps pkg-config (on conserve l'ordre)
set(ALL_PKG_LIBS
  ${GRPCPP_LIBS_LIST}
  ${CHAM_LIBS_LIST}
  ${STARPU_LIBS_LIST}
  ${OPENBLAS_LIBS_LIST}
  ${HWLOC_LIBS_LIST}
)

# ------------------------------------------------------------------
# 7. LIEN — une seule signature keyword (PRIVATE)
# ------------------------------------------------------------------
target_link_libraries(DagCholeskyWorker PRIVATE
  ${Protobuf_LIBRARIES}
  Threads::Threads
  ${ARMONIK_WORKER_LIB}
  ${ALL_PKG_LIBS}
  dl
  rt
)

# ------------------------------------------------------------------
# 8. RPATH pour retrouver les .so au runtime
# ------------------------------------------------------------------
set_target_properties(DagCholeskyWorker PROPERTIES
  BUILD_RPATH   "${ARMONIKCPP_PREFIX}/lib"
  INSTALL_RPATH "${ARMONIKCPP_PREFIX}/lib"
)
