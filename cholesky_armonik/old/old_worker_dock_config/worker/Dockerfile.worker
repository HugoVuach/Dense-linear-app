# =============================================================================
# worker-chameleon : ArmoniK C++ worker + Chameleon (CUDA+StarPU+OpenBLAS)
# - Construit Chameleon & deps (OpenBLAS, hwloc CUDA, StarPU)
# - Récupère et CONSTRUIT le SDK C++ ArmoniK depuis le repo officiel
# - Compile ton binaire worker (src/worker.cpp)
# - Assemble une image runtime GPU minimale
# =============================================================================

# -----------------------------------------------------------------------------
# Stage 1 — builder : toolchain Chameleon (OpenBLAS, CUDA headers, hwloc(CUDA), StarPU, Chameleon)
# -----------------------------------------------------------------------------
FROM ubuntu:24.04 AS builder
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake git pkg-config \
    libhwloc-dev libnuma-dev libomp-dev \
    libtool libtool-bin autoconf automake m4 \
    gfortran curl wget unzip ca-certificates gnupg2 \
    zlib1g-dev libffi-dev libssl-dev \
    libevent-dev libudev-dev libcap-dev \
    libx11-dev libxext-dev libxrender-dev libxtst-dev \
    python3 python3-pip python3-dev \
    libxml2-dev libxslt1-dev \
    libnuma1 libpciaccess0 libpciaccess-dev \
    ninja-build ocl-icd-opencl-dev \
    openmpi-bin libopenmpi-dev \
    libnvidia-ml-dev \
 && rm -rf /var/lib/apt/lists/*

# OpenBLAS
RUN cd /tmp && \
    git clone --depth 1 --branch v0.3.26 https://github.com/OpenMathLib/OpenBLAS.git && \
    cd OpenBLAS && \
    make USE_LAPACK=1 LAPACKE=1 -j 4 && \
    make install PREFIX=/install/openblas && \
    ldconfig && \
    rm -rf /tmp/OpenBLAS

# CUDA toolkit (headers + nvcc pour compiler, les drivers viendront du nœud)
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && rm -f cuda-keyring_1.1-1_all.deb && \
    apt-get update && apt-get install -y --no-install-recommends cuda-toolkit-12-9 && \
    rm -rf /var/lib/apt/lists/*

# Rendre visibles les libs CUDA
RUN printf "/usr/local/cuda/lib64\n/usr/local/lib\n" > /etc/ld.so.conf.d/cuda.conf && ldconfig

# ENV build
ENV CUDA_HOME="/usr/local/cuda" \
    PATH="/usr/local/cuda/bin:/opt/hwloc_cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:/opt/hwloc_cuda/lib:${LD_LIBRARY_PATH:-}" \
    PKG_CONFIG_PATH="/usr/local/cuda/lib64/pkgconfig:/opt/hwloc_cuda/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:${PKG_CONFIG_PATH:-}"

# hwloc (CUDA ON, NVML OFF)
RUN set -eux; cd /tmp; \
    git clone --branch hwloc-2.10.0 https://github.com/open-mpi/hwloc.git; \
    cd hwloc; ./autogen.sh; \
    export ac_cv_lib_nvidia_ml_nvmlInit=no; \
    ./configure --enable-cuda --with-cuda=/usr/local/cuda --disable-nvml --prefix=/opt/hwloc_cuda; \
    make -j"$(nproc)"; make install; ldconfig; rm -rf /tmp/hwloc

# StarPU (CUDA/OpenCL/MPI), sans bindings Python
RUN set -eux; cd /tmp; \
  git clone --depth 1 --branch starpu-1.4 https://gitlab.inria.fr/starpu/starpu.git; \
  cd starpu; ./autogen.sh; \
  ./configure --prefix=/usr/local \
      --with-hwloc=/opt/hwloc_cuda \
      --enable-cuda --enable-opencl --enable-mpi \
      --with-cuda=/usr/local/cuda \
      --disable-build-doc --disable-python --without-python --disable-starpupy \
      PYTHON=no \
      --with-blas-lib="-lopenblas" --with-blas-inc="/usr/local/include"; \
  make -j"$(nproc)"; make install; ldconfig; rm -rf /tmp/starpu

# Chameleon (CUDA + StarPU + OpenBLAS)
RUN set -eux; cd /tmp; \
    git clone --depth 1 --recurse-submodules https://gitlab.inria.fr/solverstack/chameleon.git; \
    cd chameleon; mkdir build && cd build; \
    cmake .. \
      -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON \
      -DCHAMELEON_ENABLE_CUDA=ON -DCHAMELEON_USE_CUDA=ON \
      -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
      -DCHAMELEON_ENABLE_MPI=ON -DCHAMELEON_ENABLE_OPENCL=ON \
      -DCHAMELEON_SCHED_STARPU=ON -DCHAMELEON_SCHED_PARSEC=OFF -DCHAMELEON_SCHED_QUARK=OFF \
      -DCHAMELEON_ENABLE_TESTING=OFF -DCHAMELEON_PREC_D=ON \
      -DBLAS_LIBRARIES="/usr/local/lib/libopenblas.so" \
      -DBLAS_INCLUDE_DIRS="/usr/local/include" \
      -DLAPACKE_INCLUDE_DIR="/usr/local/include" \
      -DLAPACKE_LIBRARY="/usr/local/lib/libopenblas.so" \
      -DCBLAS_LIBRARY="/usr/local/lib/libopenblas.so" \
      -DSTARPU_DIR=/usr/local -DHWLOC_ROOT=/opt/hwloc_cuda; \
    make -j"$(nproc)"; make install; ldconfig; rm -rf /tmp/chameleon


# -----------------------------------------------------------------------------
# Stage 2 — sdk : récupère et CONSTRUIT le SDK C++ ArmoniK depuis le repo officiel
#   On suit l’esprit de leur guide "Compilation steps for cpp API".
# -----------------------------------------------------------------------------
FROM ubuntu:24.04 AS sdk
ENV DEBIAN_FRONTEND=noninteractive

# Outils de build + gRPC/Protobuf (pour générer et linker le SDK)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake git pkg-config \
    libgrpc++-dev protobuf-compiler-grpc protobuf-compiler libprotobuf-dev \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Récupération des sources ArmoniK.Api
WORKDIR /src
RUN git clone https://github.com/aneoconsulting/ArmoniK.Api.git .  --depth 1

# Construire la partie C++ (client/server) et générer/install le SDK côté C++
# NB: Le repo expose les .proto sous Protos/V1 ; les scripts officiels automatisent ça.
# Ici on reconstruit un "install" minimal de headers + libs C++ utilisables par ton worker.
WORKDIR /src/packages/cpp
RUN cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/armonik-cpp && \
    cmake --build build -j"$(nproc)" && \
    cmake --install build

# Assure la présence des headers agent_common.* dans le prefix d'install
RUN set -eux; \
  mkdir -p /opt/armonik-cpp/include/armonik/worker; \
  if [ -f /src/packages/cpp/build/ArmoniK.Api.Worker/agent_common.pb.h ]; then \
    cp -v /src/packages/cpp/build/ArmoniK.Api.Worker/agent_common.pb.h /opt/armonik-cpp/include/armonik/worker/; \
  fi; \
  if [ -f /src/packages/cpp/build/ArmoniK.Api.Worker/agent_common.grpc.pb.h ]; then \
    cp -v /src/packages/cpp/build/ArmoniK.Api.Worker/agent_common.grpc.pb.h /opt/armonik-cpp/include/armonik/worker/; \
  fi


# Résultat attendu :
#  - Headers SDK C++ (Worker/..., utils/WorkerServer.h, exceptions/..., objects.pb.h, etc.) sous /opt/armonik-cpp/include
#  - Libs nécessaires sous /opt/armonik-cpp/lib
# (Conformément aux scripts de build-worker/documentation du repo ArmoniK.Api). :contentReference[oaicite:1]{index=1}


# -----------------------------------------------------------------------------
# Stage 3 — worker-build : compile ton binaire contre Chameleon + SDK C++
# -----------------------------------------------------------------------------
FROM builder AS worker-build

# On récupère le SDK C++ ArmoniK compilé (headers + libs) depuis le stage sdk
COPY --from=sdk /opt/armonik-cpp /opt/armonik-cpp

# gRPC/Protobuf (headers/libs) — on ajoute ceux du stage sdk (provisionnés via apt)
COPY --from=sdk /usr/include /usr/include
COPY --from=sdk /usr/lib /usr/lib

# ENV pour pkg-config et link
ENV PKG_CONFIG_PATH="/opt/hwloc_cuda/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/cuda/lib64/pkgconfig:${PKG_CONFIG_PATH:-}" \
    LD_LIBRARY_PATH="/opt/hwloc_cuda/lib:/usr/local/lib:/usr/local/lib64:/usr/local/cuda/lib64:/usr/lib:${LD_LIBRARY_PATH:-}" \
    PATH="/usr/local/bin:/opt/hwloc_cuda/bin:/usr/local/cuda/bin:${PATH}" \
    ARMONIKCPP_PREFIX="/opt/armonik-cpp"

# Sources de TON worker
WORKDIR /src
COPY CMakeLists.txt ./
COPY src/ ./src/
# appsettings.json ira dans le runtime

# Build binaire qui bug
#RUN cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DARMONIKCPP_PREFIX=/opt/armonik-cpp && \
 #   cmake --build build -j"$(nproc)" && \
  #  strip build/DagCholeskyWorker || true

# build binaire
RUN cmake -S . -B build \
    -DCMAKE_BUILD_TYPE=Release \
    -DARMONIKCPP_PREFIX=/opt/armonik-cpp \
    -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=/src/build \
 && cmake --build build -j"$(nproc)" --target DagCholeskyWorker --verbose \
 && (ls -lah /src/build || true) \
 && (find /src/build -maxdepth 2 -type f -name DagCholeskyWorker -printf "EXE: %p\n")


# -----------------------------------------------------------------------------
# Stage 4 — runtime : image finale GPU minimale
# -----------------------------------------------------------------------------
FROM nvidia/cuda:12.9.0-runtime-ubuntu24.04 AS runtime
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    libnuma1 libgomp1 libevent-2.1-7t64 libcap2 libudev1 \
    libx11-6 libxext6 libxrender1 libxtst6 \
    libxml2 ocl-icd-libopencl1 libgfortran5 libquadmath0 \
    libpciaccess0 pkg-config ca-certificates \
    # runtime gRPC/Protobuf
    libgrpc++1 libprotobuf32 && \
    rm -rf /var/lib/apt/lists/*

# Libs runtime depuis le stage builder (OpenBLAS, StarPU, Chameleon, hwloc)
COPY --from=builder /usr/local/ /usr/local/
COPY --from=builder /opt/hwloc_cuda/ /opt/hwloc_cuda/

# SDK C++ ArmoniK runtime (libs) + includes si besoin de debug
COPY --from=sdk /opt/armonik-cpp /opt/armonik-cpp

# Binaire + appsettings
WORKDIR /app
COPY --from=worker-build /src/build/DagCholeskyWorker /app/DagCholeskyWorker
COPY appsettings.json /app/appsettings.json

# Répertoires et utilisateur non-root
RUN mkdir -p /cache /data && \
    useradd -m -u 10001 worker && chown -R worker:worker /app /cache /data
USER worker

# ENV runtime (ajustables par le manifest K8s)
ENV CHAMELEON_DIR="/usr/local" \
    STARPU_PREFIX="/usr/local" \
    CUDA_HOME="/usr/local/cuda" \
    LD_LIBRARY_PATH="/opt/armonik-cpp/lib:/opt/hwloc_cuda/lib:/usr/local/lib:/usr/local/lib64:/usr/local/cuda/lib64:${LD_LIBRARY_PATH:-}" \
    PATH="/usr/local/bin:/opt/hwloc_cuda/bin:/usr/local/cuda/bin:${PATH}"

# Lancer le worker
CMD ["/app/DagCholeskyWorker"]
