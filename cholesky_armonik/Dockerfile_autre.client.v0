# syntax=docker/dockerfile:1

FROM alpine:3.18.6 AS builder

RUN apk add --no-cache \
    git gcc g++ build-base autoconf automake libtool \
    curl c-ares c-ares-dev make cmake unzip linux-headers \
    protobuf grpc grpc-dev protobuf-dev

ENV protobuf_BUILD_TESTS=OFF
RUN mkdir -p /client/install/

# 1) Récupère et construit le SDK C++ ArmoniK
RUN git clone https://github.com/aneoconsulting/ArmoniK.Api.git /armonik_api_temp/
WORKDIR /armonik_api_temp/packages/cpp
RUN mkdir -p install build
WORKDIR /armonik_api_temp/packages/cpp/build
RUN cmake -DCMAKE_BUILD_TYPE=Release \
          -DPROTO_FILES_DIR=/armonik_api_temp/Protos/V1/ \
          -DCMAKE_INSTALL_PREFIX=/armonik_api_temp/packages/cpp/install/ \
          -DBUILD_TEST=OFF \
          /armonik_api_temp/packages/cpp \
 && make -j"$(nproc)" install

# 2) Copie le SDK dans /client/install et nettoie
WORKDIR /
RUN cp -a /armonik_api_temp/packages/cpp/install/. /client/install/ \
 && rm -rf /armonik_api_temp/

# 3) Construit ton client
COPY ./src/ /client/src/
COPY ./CMakeLists.txt /client/

ENV LD_LIBRARY_PATH="/client/install/lib:${LD_LIBRARY_PATH}"
ENV PATH="/client/install/bin:${PATH}"

WORKDIR /client
RUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/client/install" . \
 && make -j"$(nproc)" install

# --------- Image d'exécution minimale ----------
FROM alpine:3.18.6

# Libs runtime (grpc/protobuf/ssl, stdc++)
RUN apk add --no-cache libstdc++ grpc protobuf c-ares ca-certificates \
 && update-ca-certificates

# Utilisateur non-root
RUN addgroup -g 5000 -S armonikuser \
 && adduser -D -h /home/armonikuser -u 5000 -G armonikuser --shell /bin/sh armonikuser \
 && mkdir /cache && chown armonikuser: /cache
USER armonikuser

# Binaire et libs
COPY --from=builder /client /client


ENV LD_LIBRARY_PATH="/client/install/lib:${LD_LIBRARY_PATH}"
ENV PATH="/client/install/bin:${PATH}"

# Ton binaire est bien présent ici :
#   /client/install/bin/armonik_cholesky_client
ENTRYPOINT ["/client/install/bin/armonik_cholesky_client"]
