# -------- Stage 0 : récupérer le SDK C++ ArmoniK depuis une image existante
ARG SDK_IMAGE=sdk:test
FROM ${SDK_IMAGE} AS sdk
# Doit contenir /opt/armonik-cpp (headers + libs)

# -------- Stage 1 : builder le client
FROM ubuntu:24.04 AS build
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake pkg-config \
    libprotobuf-dev protobuf-compiler \
    libgrpc++-dev libgrpc-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /src
# SDK ArmoniK (headers + libs)
COPY --from=sdk /opt/armonik-cpp /opt/armonik-cpp
# Ton code
COPY client_distrib.cpp /src/client_distrib.cpp

# Compile
RUN g++ /src/client_distrib.cpp -o /src/client_distrib \
    -I/opt/armonik-cpp/include \
    -L/opt/armonik-cpp/lib \
    -larmonik_api_client -lprotobuf -lgrpc++ -lgrpc -lpthread

# -------- Stage 2 : image runtime
FROM ubuntu:24.04 AS runtime
ENV DEBIAN_FRONTEND=noninteractive
# dépendances runtime de gRPC / Protobuf (simple et sûr)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libprotobuf-dev libgrpc++1 ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Libs SDK + binaire
COPY --from=sdk /opt/armonik-cpp/lib /opt/armonik-cpp/lib
ENV LD_LIBRARY_PATH=/opt/armonik-cpp/lib:$LD_LIBRARY_PATH

WORKDIR /app
COPY --from=build /src/client_distrib /app/client_distrib
# optionnel : si tu as appsettings.json à côté du Dockerfile, il sera copié
COPY appsettings.json /app/appsettings.json

ENTRYPOINT ["/app/client_distrib"]
